==============================================================================
*project-nvim*                  A dynamic project management solution for neovim

    `project.nvim` is a `Neovim` plugin written
    in Lua that provides a dynamic project
    management solution.

    This plugin allows you to navigate through projects,
    "bookmark" and/or discard them, depending on
    your needs.

    This is forked from `ahmedkhalf/project.nvim`:
    https://github.com/ahmedkhalf/project.nvim

                This plugin will be maintained and extended          ~
                        for the foreseeable future.              ~

==============================================================================
Table of Contents                                             *project-nvim.toc*

1. Features                                              |project-nvim.features|
2. Installation                                           |project-nvim.install|
    2.1 vim-plug                                 |project-nvim.install.vim-plug|
    2.2 lazy.nvim                               |project-nvim.install.lazy-nvim|
    2.3 pckr.nvim                               |project-nvim.install.pckr-nvim|
3. project-nvim.setup                                       |project-nvim.setup|
    3.1. `Project.Config.Options`                         |Project.Config.Options|
    3.2. `Project.Config.Telescope`                     |Project.Config.Telescope|
4. Pattern Matching                              |project-nvim.pattern-matching|
5. Nvim Tree                                            |project-nvim.nvim-tree|
6. Telescope                                            |project-nvim.telescope|
    6.1. Telescope Mappings                        |project-nvim.telescope.maps|
7. Commands                                              |project-nvim.commands|
    7.1. `:ProjectAdd`                                               |:ProjectAdd|
    7.2. `:ProjectRoot`                                             |:ProjectRoot|
    7.3. `:ProjectConfig`                                         |:ProjectConfig|
    7.4. `:ProjectRecents`                                       |:ProjectRecents|
    7.5. `:ProjectDelete`                                         |:ProjectDelete|
8. API                                                        |project-nvim.api|
    8.1. `get_project_root()`                    |project-nvim.get_project_root()|
    8.2. `get_recent_projects()`              |project-nvim.get_recent_projects()|
    8.3. `get_config()`                                |project-nvim.get_config()|
    8.4. `get_history_paths()`                  |project-nvim.get_history_paths()|
9. Util                                                      |project-nvim.util|
10. Troubleshooting                               |project-nvim.troubleshooting|

==============================================================================
1. Features                                              *project-nvim.features*

* Automagically `cd` to the project root directory using `vim.lsp`
* Pattern matching is a fallback in case LSP fails
* Functional `checkhealth` hook (`:checkhealth project`)
* Telescope Integration `:Telescope projects`
* `nvim-tree` Integration

==============================================================================
2. Installation                                           *project-nvim.install*

------------------------------------------------------------------------------
2.1 vim-plug                                     *project-nvim.install.vim-plug*

>vim
    if has('nvim-0.11')
      Plug 'DrKJeff16/project.nvim'

      " OPTIONAL
      Plug 'nvim-telescope/telescope.nvim' | Plug 'nvim-lua/plenary.nvim'

      lua << EOF
      require('project').setup({
        -- your configuration comes here
        -- or leave it empty to use the default settings
        -- refer to the configuration section below
      })
      EOF
    endif
<
------------------------------------------------------------------------------
2.2 lazy.nvim                                   *project-nvim.install.lazy-nvim*

>lua
    require('lazy').setup({
      spec = {
        -- Other plugins
        {
          'DrKJeff16/project.nvim',
          dependencies = { -- OPTIONAL
            'nvim-lua/plenary.nvim',
            'nvim-telescope/telescope.nvim',
          },

          ---@module 'project'
          ---@type Project.Config.Options
          opts = {
            -- your configuration comes here
            -- or leave it empty to use the default settings
            -- refer to the configuration section below
          },
          cond = vim.fn.has('nvim-0.11') == 1, -- RECOMMENDED
        },
      },
    })
<

------------------------------------------------------------------------------
2.3 pckr.nvim                                   *project-nvim.install.pckr-nvim*

>lua
    if vim.fn.has('nvim-0.11') == 1 then
      require('pckr').add({
        {
          'DrKJeff16/project.nvim',
          requires = {
            'nvim-lua/plenary.nvim',
            'nvim-telescope/telescope.nvim',
          }, -- OPTIONAL
          config = function()
            require('project').setup({
              -- your configuration comes here
              -- or leave it empty to use the default settings
              -- refer to the configuration section below
            })
          end,
        };
      })
    end
<

==============================================================================
3. project-nvim.setup                                       *project-nvim.setup*

  To enable the plugin you must call `setup()`.

  Parameters ~

  â€¢ `{options}`  (Type: |Project.Config.Options|) The options table

  The `{options}` parameter is not required,
  but if you're interested in the default config options,
  see |Project.Config.Options| for all the defaults.

  Example ~
>lua
    require('project').setup({
      -- Options
    })
<

------------------------------------------------------------------------------
3.1 `Project.Config.Options`                              *Project.Config.Options*
                                                    *project-nvim.setup-options*

    These are the options passed to `setup()`.

    Fields ~


    * {logging}                 (boolean)
                                If `true`, it enables logging
                                in `<project_datapath>/project.log`.
                                See {datapath} for more info

                                WARNING: Experimental ~

                                Default: `false` ~


    * {disable_on}              (`{ ft: string[], bt: string[] }`)
                                CREDITS TO @Zeioth! ~
                                Determines in what filetypes/buftypes
                                will the plugin not execute.

                                It's a table with two fields:
                                `ft` (|'filetype'|) and `bt` (|'buftype'|),
                                each one being a string array table.

                                The default value can be found in ~
                                project.nvim's `README.md` ~


    * {manual_mode}             (boolean)
                                If `true` your root directory
                                won't be changed automatically,
                                so you have the option to manually
                                do so using the |:ProjectRoot| command

                                Default: `false` ~


    * {detection_methods}       (`table|('lsp'|'pattern')[]`)
                                Methods of detecting the root directory.
                                `'lsp'` uses the native neovim LSP.
                                `'pattern'` uses vim-rooter like
                                glob pattern matching.

                                Order matters here! ~
                                If one is not detected, fallback to next.
                                You can also delete or rearrange them.
                                The `detection methods` get filtered
                                and rid of duplicates during runtime

                                Default: `{ 'lsp' , 'pattern' }` ~


    * {patterns}                (`string[]`)
                                All the patterns used to detect the root dir
                                when `pattern` is in {detection_methods}.

                                See |project-nvim.pattern-matching| for more
                                info about pattern matching

                                Default: `{ '.git', '.github', '_darcs', '.hg', '.bzr', '.svn', 'Pipfile' }` ~


    * {allow_patterns_for_lsp}  (boolean)
                                Sets whether to use Pattern Matching rules
                                on the LSP.
                                If `false`, the Pattern Matching will only
                                apply to the pattern detection method

                                See |project-nvim.pattern-matching| for more
                                info about pattern matching

                                Default: `true` ~


    * {allow_different_owners}  (boolean)
                                Determines whether a project will be
                                added if its project root is owned by a
                                different user.
                                If `false`, it won't add a project if its root
                                is not owned by the current nvim `UID`
                                (UNIX only) ~

                                Default: `true` ~


    * {enable_autochdir}        (boolean)
                                If enabled, set `vim.opt.autochdir` to `true`.
                                This is disabled by default because
                                the plugin implicitly disables |'autochdir'|

                                Default: `false` ~


    * {telescope}               (|Project.Config.Telescope|)
                                Table of options used for the telescope picker.

                                See |Project.Config.Telescope| for more
                                details


    * {ignore_lsp}              (`string[]`)
                                Table of LSP clients to ignore by name,
                                e.g. `{ 'efm', ... }`

                                If you have `nvim-lspconfig` installed you can
                                look up |lspconfig-all| for a list of servers

                                Default: `{}` ~


    * {exclude_dirs}            (`string[]`)
                                A table of directories to exclude,
                                e.g. `{ '~/.cargo/*', ... }`

                                Default: `{}` ~


    * {silent_chdir}            (boolean)
                                If `false`, you'll get notified every time
                                the plugin changes directory.
                                This is useful for debugging,
                                or for users that enjoy verbose
                                operations

                                Default: `true` ~


    * {scope_chdir}             (`'global'|'tab'|'win'`)
                                Determines the scope for dir change

                                Valid options are:
                                - `'global'`: The global nvim `cwd`
                                    will sync to your current
                                    buffer's project
                                - `'tab'`: Per-tab `cwd` sync to the
                                     current buffer's project
                                - `'win'`: Per-window `cwd` sync to the
                                     current buffer's project

                                Default: `'global'` ~


    * {datapath}                (string)
                                The path where `project/project_history`
                                will be stored in.

                                For more info, you can run the following code
                                in your command line:

>vim
    " Vimscript
    :lua vim.print(require('project').get_history_paths())
<

                                Default: `vim.fn.stdpath('data')` ~


------------------------------------------------------------------------------
3.2 `Project.Config.Telescope`                          *Project.Config.Telescope*
                                                 *project-nvim.telescope-config*


    Fields ~

    * {enabled}                 (boolean)
                                Determines whether the `telescope` picker
                                should be called.
                                If `telescope` is not installed, then
                                this won't make a difference

                                Note that even if set to `false`,
                                you can still load the extension manually

                                Default: `true` ~


    * {sort}                    (`'newest'|'oldest'`)
                                Determines whether the newest projects come
                                first in the telescope picker (`'newest'`)
                                or the oldest (`'oldest'`)

                                Default: `'newest'` ~


    * {prefer_file_browser}     (boolean)
                                Toggles `telescope-file-browser.nvim` for the
                                telescope picker instead of the `find_files`
                                builtin.
                                In case it is not available, it'll fall back
                                to the `find_files` builtin

                                Default: `false` ~


    * {show_hidden}             (boolean)
                                Make hidden files visible when using
                                the `telescope` picker

                                Default: `false` ~


==============================================================================
4. Pattern Matching                              *project-nvim.pattern-matching*

    `project.nvim` comes with a `vim-rooter`-inspired pattern matching
    expression engine to give you better handling of your projects.

    Examples ~

    To specify the root is a certain directory, prefix it with `=`

>lua
        patterns = { '=src' }
<

    To specify the root has a certain directory or file
      (which may be a glob), just add it to the pattern list

>lua
        patterns = { '.git', '.github', '*.sln', 'build/env.sh' }
<

    To specify the root has a certain directory as an ancestor
      (for excluding directories), prefix it with `^`

>lua
        patterns = { '^fixtures' }
<

    To specify the root has a certain directory as its direct
      ancestor / parent (for putting working projects in a
      common directory), prefix it with `>`

>lua
        patterns = { '>Latex' }
<

    To exclude a pattern, prefix it with `!`

>lua
        patterns = {
            '!.git/worktrees',
            '!=extras',
            '!^fixtures',
            '!build/env.sh',
        }
<

            NOTE: Make sure to put your pattern exclusions first, ~
                  and then the patterns you DO want included ~


==============================================================================
5. Nvim Tree                                            *project-nvim.nvim-tree*

    Make sure these flags are enabled to support `nvim-tree`:

>lua
        require('nvim-tree').setup({
            sync_root_with_cwd = true,
            respect_buf_cwd = true,
            update_focused_file = {
                enable = true,
                update_root = true,
            },
        })
<


==============================================================================
6. Telescope                                            *project-nvim.telescope*

    To enable `telescope.nvim` integration use the following
    code in your config:

>lua
        require('telescope').setup(...)
        -- Other stuff may come here...
        require('telescope').load_extension('projects')
<

    Also you can configure the picker when calling
    `require('telescope').setup({ telescope = { enabled = true } })`
    (see |Project.Config.Telescope| for more options).

    This will run:

>lua
        require('telescope').load_extension('projects')
<

    from within the init process.


    Example ~

>lua
        require('telescope').setup({
          --- ...
          extensions = {
            projects = {
                layout_strategy = "horizontal",

                layout_config = {
                  anchor = "N",
                  height = 0.25,
                  width = 0.6,
                  prompt_position = "bottom",
                },

                prompt_prefix = "ó±Ž¸  ",
            },
          },
        })
<

    After that you can now call it from the command line:

>vim
        :Telescope projects
<

------------------------------------------------------------------------------
6.1 Telescope Mappings                         *project-nvim.telescope.mappings*

    `project.nvim` comes with the following mappings for the
    Telescope picker:

        Normal mode   Insert mode   Action                          ~
        `f`             `<C-f>`         `find_project_files()`
        `b`             `<C-b>`         `browse_project_files()`
        `d`             `<C-d>`         `delete_project()`
        `s`             `<C-s>`         `search_in_project_files()`
        `r`             `<C-r>`         `recent_project_files()`
        `w`             `<C-w>`         `change_working_directory()`


==============================================================================
7. Commands                                              *project-nvim.commands*

    There are a bunch of user commands you can call from the cmdline.
    Some of them might be incomplete and/or reworked in the future.


                                                       *ProjectAdd*  *:ProjectAdd*
`:ProjectAdd`

    Description ~

    The `:ProjectAdd` command is a manual hook to add
    the current root to the session directories table,
    then subsequently `cd` to the current file's
    project directory.

    The command does essentially the following in the command line:

>vim
        :lua require('project.api').add_project_manually()
<

    This is particularly useful if you've enabled {manual_mode}
    it `setup()` (|project-nvim.setup-options|).


                                                 *ProjectConfig*  *:ProjectConfig*
`:ProjectConfig`


    The `:ProjectConfig` command is a hook to display your current config
    through |project-nvim.get_config()|.

    The command does essentially the following in the command line:

>vim
        :lua vim.notify(vim.inspect(require('project').get_config()))
<

    Useful for debugging.


                                                 *ProjectDelete*  *:ProjectDelete*
`:ProjectDelete[!] /path/to/first [/path/to/second [...]]`


    The `:ProjectDelete` command is one that needs at least one argument,
    and only accepts directories separated by a space.
    The arguments have to be directories that exist in the resulting
    table returned by |project-nvim.get_recent_projects()|.
    It also has barebones completion, though I'd like some help with
    how to do the completion parsing down the line.

    The arguments can be relative, absolute or un-expanded (`~/...`).
    The command will attempt to parse the args. If the [!] is given
    the command won't abort on invalid arguments.
    If there's any successful deletion you'll receive a notification
    through |vim.notify()| (invalid args with [!] are not
    included).


                                               *ProjectRecents*  *:ProjectRecents*
`:ProjectRecents`


    The `:ProjectRecents` command is a hook to print a formatted list
    of your recent projects using |vim.notify()|.


                                                     *ProjectRoot*  *:ProjectRoot*
`:ProjectRoot`


    The `:ProjectRoot` command is a manual hook to set the
    current working directory to the current file's root,
    attempting to use any of the detection methods
    (|Project.Config.Options.detection_methods|)
    set by the user.

    The command does essentially the following in the command line:

>vim
        :lua require('project.api').on_buf_enter()
<

    This is particularly useful if you've enabled {manual_mode}
    it `setup()` (|project-nvim.setup-options|).


==============================================================================
8. API                                                        *project-nvim.api*

    This is a set of both internal utilities and tools for the user
    to benefit from.

------------------------------------------------------------------------------
8.1 `get_project_root()`                         *project-nvim.get_project_root()*

    An internal method for the API to determine
    both the project root and the method/LSP used

    Example ~

>lua
        ---@type fun(): (string|nil,string?)
        local root, lsp_or_method = require('project').get_project_root()
<

------------------------------------------------------------------------------
8.2 `get_recent_procjects()`                 *project-nvim.get_recent_procjects()*

    This utility returns either an empty table `{}`
    or a string array `{ '/path/to/project1', ... }`
    containing your recent projects.


    Example ~

    You can get a list of recent projects like this:

>lua
        ---@type string[]|table
        local recent_projects = require('project').get_recent_projects()

        -- Using `vim.notify()`
        vim.notify(vim.inspect(recent_projects))

        -- Using `vim.print()`
        vim.print(recent_projects)
<


------------------------------------------------------------------------------
8.3 `get_config()`                                     *project-nvim.get_config()*

    If `setup()` (|project-nvim.setup|) has been called, it returns
    a table containing the currently set options.
    Otherwise it will return `nil`.

    Example ~

>lua
        local config = require('project').get_config()

        -- Using `vim.notify()`
        vim.notify(vim.inspect(config))

        -- Using `vim.print()`
        vim.print(config)
<

------------------------------------------------------------------------------
8.4 `get_history_paths()`                       *project-nvim.get_history_paths()*

    Usage ~

    If no valid args are passed to this function
    it will return the following dictionary:

>lua
        --- Lua
        local get_history_paths = require('project').get_history_paths

        -- A dictionary table containing all return values below
        vim.print(get_history_paths())
        --- {
        ---     datapath = <datapath>,
        ---     projectpath = <projectpath>,
        ---     historyfile = <historyfile>,
        --- }
<

    Otherwise, if either `'datapath'`, `'projectpath'
    or `'historyfile'` are passed, it will return
    the string value of said arg:

>lua
        -- The directory where `project` sets its `datapath`
        vim.print(get_history_paths('datapath'))

        -- The directory where `project` saves the project history
        vim.print(get_history_paths('projectpath'))

        -- The path to where `project` saves its recent projects history
        vim.print(get_history_paths('historyfile'))
<

==============================================================================
9. Util                                                      *project-nvim.util*

    A set of utilities that get repeated across the board.

    These utilities are in part inspired by my own utilities
    found in `Jnvim`, my own Nvim configuration.

    For more info look up `https://github.com/DrKJeff16/Jnvim`.

    Usage ~

    You can import the utilities like this:

>lua
        --- Lua
        local ProjUtil = require('project.utils.util')
<

==============================================================================
10. Troubleshooting                               *project-nvim.troubleshooting*


    History File Not Created ~

    If you're in a UNIX environment make sure you have
    `read`, `write` and `access` permissions (`rwx`)
    for the `projectpath` directory.

    - The default value is `$XDG_DATA_HOME/nvim/project_nvim`
    - See |stdpath()| for more info

    You can get the value of `projectpath` by running in the cmdline:

>vim
        :lua vim.print(require('project').get_history_paths('projectpath'))
<

    If you lack the required permissions for that directory,
    you can either:

    - Delete that directory (RECOMMENDED)
    - Run `chmod 755 <project/path>` (NOT SURE IF THIS WILL FIX IT)


 vim:tw=78:ts=4:sw=4:sts=4:et:ft=help:norl:
