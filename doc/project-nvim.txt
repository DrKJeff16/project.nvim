==============================================================================
*project-nvim*                  A dynamic project management solution for neovim

    `project.nvim` is a Neovim plugin written in Lua that,
    under configurable conditions, automatically sets
    the user's `cwd` to the current project root
    and also allows users to manage, access and selectively include
    their projects in a history.

    This plugin allows you to navigate through projects,
    "bookmark" and/or discard them, according to your needs.

    This was originally forked from `ahmedkhalf/project.nvim`.
    Ever since I've decided to extend it and address issues.

                This plugin will be maintained and extended          ~
                        for the foreseeable future.              ~

==============================================================================
Table of Contents                                             *project-nvim.toc*

1. Installation                                           |project-nvim.install|
    1.1 vim-plug                                 |project-nvim.install-vim-plug|
    1.2 lazy.nvim                                    |project-nvim.install-lazy|
    1.3 pckr.nvim                                    |project-nvim.install-pckr|
    1.4 paq-nvim                                      |project-nvim.install-paq|
2. project-nvim.setup                                       |project-nvim.setup|
    2.1. `Project.Config.Options`                         |Project.Config.Options|
    2.2. `Project.Config.Telescope`                     |Project.Config.Telescope|
    2.3. `Project.Config.FzfLua`                           |Project.Config.FzfLua|
    2.4. `Project.Config.Logging`                         |Project.Config.Logging|
3. Pattern Matching                              |project-nvim.pattern-matching|
4. Nvim Tree                                            |project-nvim.nvim-tree|
5. Neo Tree                                              |project-nvim.neo-tree|
6. Telescope                                            |project-nvim.telescope|
    6.1. Telescope Mappings                        |project-nvim.telescope.maps|
7. Commands                                              |project-nvim.commands|
    7.1. `:Project`                                                     |:Project|
    7.2. `:ProjectLog`                                               |:ProjectLog|
    7.3. `:ProjectLogClear`                                     |:ProjectLogClear|
    7.2. `:ProjectFzf`                                               |:ProjectFzf|
    7.3. `:ProjectTelescope`                                   |:ProjectTelescope|
    7.4. `:ProjectAdd`                                               |:ProjectAdd|
    7.5. `:ProjectRoot`                                             |:ProjectRoot|
    7.6. `:ProjectConfig`                                         |:ProjectConfig|
    7.7. `:ProjectDelete`                                         |:ProjectDelete|
    7.8. `:ProjectSession`                                       |:ProjectSession|
8. API                                                        |project-nvim.api|
    8.1. `get_project_root()`                    |project-nvim.get_project_root()|
    8.2. `get_recent_projects()`              |project-nvim.get_recent_projects()|
    8.3. `get_config()`                                |project-nvim.get_config()|
    8.4. `get_history_paths()`                  |project-nvim.get_history_paths()|
9. Util                                                      |project-nvim.util|
10. Troubleshooting                               |project-nvim.troubleshooting|

==============================================================================
1. Installation                                           *project-nvim.install*

------------------------------------------------------------------------------
1.1 vim-plug                                     *project-nvim.install-vim-plug*
>vim
    if has('nvim-0.11')
      Plug 'DrKJeff16/project.nvim'

      " OPTIONAL
      Plug 'nvim-telescope/telescope.nvim' | Plug 'nvim-lua/plenary.nvim'
      Plug 'ibhagwan/fzf-lua'

      lua << EOF
      require('project').setup({
        -- your configuration comes here
        -- or leave it empty to use the default settings
      })
      EOF
    endif
<
------------------------------------------------------------------------------
1.2 lazy.nvim                                        *project-nvim.install-lazy*
>lua
    require('lazy').setup({
      spec = {
        -- Other plugins
        {
          'DrKJeff16/project.nvim',
          dependencies = { -- OPTIONAL
            'nvim-lua/plenary.nvim',
            'nvim-telescope/telescope.nvim',
            'ibhagwan/fzf-lua',
          },
          ---@module 'project'

          ---@type Project.Config.Options
          opts = {
            -- your configuration comes here
            -- or leave it empty to use the default settings
            -- refer to the configuration section below
          },
          cond = vim.fn.has('nvim-0.11') == 1, -- RECOMMENDED
        },
      },
    })
<

------------------------------------------------------------------------------
1.3 pckr.nvim                                        *project-nvim.install-pckr*
>lua
    if vim.fn.has('nvim-0.11') == 1 then
      require('pckr').add({
        {
          'DrKJeff16/project.nvim',
          requires = { -- OPTIONAL
            'nvim-lua/plenary.nvim',
            'nvim-telescope/telescope.nvim',
            'ibhagwan/fzf-lua',
          },
          config = function()
            require('project').setup({
              -- your configuration comes here
              -- or leave it empty to use the default settings
              -- refer to the configuration section below
            })
          end,
        };
      })
    end
<


------------------------------------------------------------------------------
1.4 paq-nvim                                          *project-nvim.install-paq*
>lua
    local paq = require('paq')

    paq({
      'savq/paq-nvim',

      'DrKJeff16/project.nvim',
      'nvim-lua/plenary.nvim', -- OPTIONAL
      'nvim-telescope/telescope.nvim', -- OPTIONAL
      'ibhagwan/fzf-lua', -- OPTIONAL
    })
<

==============================================================================
2. project-nvim.setup                                       *project-nvim.setup*

  To enable the plugin you must call `setup()`.

  Parameters ~

  â€¢ `{options}`  (Type: |Project.Config.Options|) The options table

  The `{options}` parameter is not required,
  but if you're interested in the default config options,
  see |Project.Config.Options| for all the defaults.

  Example ~

  To use the defaults:
>lua
    require('project').setup()
<

------------------------------------------------------------------------------
2.1 `Project.Config.Options`                              *Project.Config.Options*
                                                    *project-nvim.setup-options*

    * {log}                     (|Project.Options.Logging|)
                                Options for logging.

                                Default: |Project.Options.Logging| ~



    * {disable_on}              (`{ ft: string[], bt: string[] }`)
                                CREDITS TO @Zeioth! ~
                                Determines in what filetypes/buftypes
                                will the plugin not execute.

                                It's a table with two fields:
                                `ft` (|'filetype'|) and `bt` (|'buftype'|),
                                each one being a string array table.

                                The default value can be found in ~
                                project.nvim's `README.md` ~


    * {manual_mode}             (boolean)
                                If `true` your root directory
                                won't be changed automatically,
                                so you have the option to manually
                                do so using the |:ProjectRoot| command

                                Default: `false` ~


    * {detection_methods}       (`('lsp'|'pattern')[]`)
                                Methods of detecting the root directory.
                                 - `'lsp'`: uses the native Neovim LSP
                                          (see |vim.lsp|)
                                 - `'pattern'`: uses `vim-rooter`-like
                                              glob pattern matching
                                              (see
                                              |project-nvim.pattern-matching|)

                                Order matters here! ~
                                If one is not detected, the other is used
                                as fallback.
                                You can also delete or rearrange them.
                                Any values that aren't valid will be
                                discarded on setup; same thing
                                with duplicates.

                                Default: `{ 'lsp' , 'pattern' }` ~


    * {patterns}                (`string[]`)
                                All the patterns used to detect the root dir
                                when `pattern` is in {detection_methods}.

                                See |project-nvim.pattern-matching| for more
                                info on pattern matching.

                                To see the default values, you have
                                the `README.md` for this plugin, and
                                as an alternative you can run
                                this code snippet in your cmdline:

>vim
        :lua vim.print(require('project.config').get_defaults().patterns)
<

                                WARNING ~
                                It is not a good idea to forcefully
                                keep this empty!


    * {allow_patterns_for_lsp}  (boolean)
                                Sets whether to use Pattern Matching rules
                                to the LSP client.

                                If `false` the Pattern Matching will
                                only apply to the `'pattern'` detection method.
                                If `true` the {patters} setting will
                                also filter your LSP's `root_dir`,
                                assuming there is one and `'lsp'`
                                is in {patterns}.

                                See |project-nvim.pattern-matching| for more
                                info on pattern matching

                                Default: `false` ~


    * {allow_different_owners}  (boolean)
                                Determines whether a project will be
                                added if its project root is owned
                                by a different user.
                                If `true`, it will add the project
                                to the history even if its root
                                is not owned by the current nvim `UID`
                                (UNIX only) ~

                                Default: `true` ~


    * {enable_autochdir}        (boolean)
                                If enabled, set `vim.opt.autochdir` to `true`.
                                This is disabled by default because
                                the plugin implicitly disables |'autochdir'|

                                Default: `false` ~


    * {historysize}             (integer)
                                The history size.
                                This will indicate how many entries
                                will be written to the history file.
                                Set to `0` for no limit
                                (by @acristoffers)

                                Default: `100` ~


    * {show_hidden}             (boolean)
                                Make hidden files visible when using
                                any picker (including `fzf-lua` and
                                `telescope`)

                                Default: `false` ~


    * {telescope}               (|Project.Config.Telescope|)
                                Table of options used for
                                the telescope picker.

                                See |Project.Config.Telescope| for more
                                details


    * {fzf_lua}                 (|Project.Config.FzfLua|)
                                Table of options used for
                                `fzf-lua` integration.

                                See |Project.Config.FzfLua| for more
                                details


    * {ignore_lsp}              (`string[]`)
                                Table of LSP clients to ignore by name,
                                e.g. `{ 'efm', ... }`

                                If you have `nvim-lspconfig` installed you can
                                look up |lspconfig-all| for a list of servers

                                Default: `{}` ~


    * {exclude_dirs}            (`string[]`)
                                A table of directories to exclude,
                                e.g. `{ '~/.cargo/*', ... }`

                                Default: `{}` ~


    * {silent_chdir}            (boolean)
                                If `false`, you'll get notified every time
                                the plugin changes directory.
                                This is useful for debugging,
                                or for users that enjoy verbose
                                operations

                                Default: `true` ~


    * {scope_chdir}             (`'global'|'tab'|'win'`)
                                Determines the scope for dir change.
                                Valid options are:
                                - `'global'`: The global nvim `cwd`
                                    will sync to your current
                                    buffer's project
                                - `'tab'`: Per-tab `cwd` sync to the
                                     current buffer's project
                                - `'win'`: Per-window `cwd` sync to the
                                     current buffer's project

                                Default: `'global'` ~


    * {before_attach}           (`fun(target_dir?: string, method?: string)`)
                                Hook to run before attaching to a new project.
                                It optionally recieves `target_dir` and
                                the `method` used to change directory

                                Default: empty function ~


    * {on_attach}               (`fun(dir?: string, method?: string)`)
                                Hook to run after attaching to a new project.
                                It optionally recieves `dir` and
                                the `method` used to change directory.
                                Only runs on successful chdir! ~

                                Default: empty function ~


    * {datapath}                (string)
                                The path where `project/project_history`
                                will be stored in.

                                For more info, you can run the following code
                                in your command line:
>vim
                                :lua vim.print(require('project').get_history_paths())
<
                                Default: `vim.fn.stdpath('data')` ~


------------------------------------------------------------------------------
2.2 `Project.Config.Telescope`                          *Project.Config.Telescope*
                                                 *project-nvim.telescope-config*

    * {enabled}                 (boolean)
                                Determines whether the `telescope` picker
                                should be called from `setup()`.
                                If `telescope` is not installed, then
                                this won't make a difference.
                                Note that even if set to `false`,
                                you can still load the extension manually

                                Default: `false` ~


    * {sort}                    (`'newest'|'oldest'`)
                                Determines whether the newest projects come
                                first in the telescope picker (`'newest'`)
                                or the oldest (`'oldest'`).
                                Invalid values will trigger this value
                                to revert to default

                                Default: `'newest'` ~


    * {mappings}                (table)
                                Table of mappings for the Telescope picker.
                                Only supports Normal and Insert modes ~

                                Default: check the README ~


    * {prefer_file_browser}     (boolean)
                                Toggles `telescope-file-browser.nvim` for the
                                telescope picker instead of the `find_files`
                                builtin.
                                In case it is not available, it'll fall back
                                to the `find_files` builtin

                                Default: `false` ~


    * {disable_file_picker}     (boolean)
                                CREDITS: UNKNOWN ~
                                Set this to `true` if you don't want
                                the file picker to appear
                                after you've selected a project

                                Default: `false` ~


------------------------------------------------------------------------------
2.3 `Project.Config.FzfLua`                                *Project.Config.FzfLua*
                                                   *project-nvim.fzf-lua-config*

    * {enabled}                 (boolean)
                                Determines whether the `fzf-lua`
                                integration is enabled.
                                If `fzf-lua` is not installed
                                this won't make a difference.

                                Default: `false` ~


------------------------------------------------------------------------------
2.4 `Project.Config.Logging`                              *Project.Config.Logging*
                                                   *project-nvim.logging-config*

    * {enabled}                 (boolean)
                                If `true`, it enables logging
                                in the same directory in which your
                                history file is stored.

                                Default: `false` ~


    * {max_size}                (number)
                                The maximum logfile size (in megabytes).

                                Default: `1.0` ~


==============================================================================
3. Pattern Matching                              *project-nvim.pattern-matching*

    `project.nvim` comes with a `vim-rooter`-inspired pattern matching
    expression engine to give you better handling of your projects.

    Examples ~

    To specify the root is a certain directory, prefix it with `=`
>lua
        patterns = { '=src' }
<
    To specify the root has a certain directory or file
      (which may be a glob), just add it to the pattern list
>lua
        patterns = { '.git', '.github', '*.sln', 'build/env.sh' }
<
    To specify the root has a certain directory as an ancestor
      (for excluding directories), prefix it with `^`
>lua
        patterns = { '^fixtures' }
<
    To specify the root has a certain directory as its direct
    ancestor / parent (for putting working projects in a
    common directory), prefix it with `>`
>lua
        patterns = { '>Latex' }
<
    To exclude a pattern, prefix it with `!`
>lua
        patterns = {
            '!.git/worktrees',
            '!=extras',
            '!^fixtures',
            '!build/env.sh',
        }
<
            NOTE: Make sure to put your pattern exclusions first, ~
                  and then the patterns you DO want included ~


==============================================================================
4. Nvim Tree                                            *project-nvim.nvim-tree*

    Make sure these flags are enabled to support `nvim-tree`:
>lua
        require('nvim-tree').setup({
            sync_root_with_cwd = true,
            respect_buf_cwd = true,
            update_focused_file = {
                enable = true,
                update_root = true,
            },
        })
<


==============================================================================
5. Neo Tree                                              *project-nvim.neo-tree*

    You can use `:Neotree filesystem ...` when changing a project.

    Example ~
>lua
        vim.keymap.set(
            'n',
            '<YOUR-TOGGLE-MAP>',
            ':Neotree filesystem toggle reveal_force_cwd<CR>',
            opts
        )
        vim.keymap.set(
            'n',
            '<YOUR-SHOW-MAP>',
            ':Neotree filesystem show reveal_force_cwd<CR>',
            opts
        )
        vim.keymap.set(
            'n',
            '<YOUR-FLOAT-MAP>',
            ':Neotree filesystem float reveal_force_cwd<CR>',
            opts
        )
        -- ... and so on
<

    NOTE ~
    Not 100% certain whether the `reveal_force_cwd` flag is necessary,
    but better safe than sorry!


==============================================================================
6. Telescope                                            *project-nvim.telescope*

    To enable `telescope.nvim` integration use the following
    code in your config:
>lua
        require('telescope').setup(...)
        -- Other stuff may come here...
        require('telescope').load_extension('projects')
<
    Also you can configure the picker when calling
    `require('telescope').setup({ telescope = { enabled = true } })`
    (see |Project.Config.Telescope| for more options).
    This will run:
>lua
        require('telescope').load_extension('projects')
<
    from within the init process.


    Example ~
>lua
        require('telescope').setup({
          --- ...
          extensions = {
            projects = {
                layout_strategy = "horizontal",

                layout_config = {
                  anchor = "N",
                  height = 0.25,
                  width = 0.6,
                  prompt_position = "bottom",
                },

                prompt_prefix = "ó±Ž¸  ",
            },
          },
        })
<
    After that you can now call it from the command line:
>vim
        :Telescope projects
<


------------------------------------------------------------------------------
6.1 Telescope Mappings                         *project-nvim.telescope.mappings*

    `project.nvim` comes with the following mappings for the
    Telescope picker:

        Normal mode   Insert mode   Action                          ~
        `f`             `<C-f>`         `find_project_files()`
        `b`             `<C-b>`         `browse_project_files()`
        `d`             `<C-d>`         `delete_project()`
        `s`             `<C-s>`         `search_in_project_files()`
        `r`             `<C-r>`         `recent_project_files()`
        `w`             `<C-w>`         `change_working_directory()`


==============================================================================
7. Commands                                              *project-nvim.commands*

    There are a bunch of user commands you can call from the cmdline.

    NOTE: Some of these might be incomplete and/or reworked in the future. ~


                                                                      *:Project*
`:Project`
                            The `:Project` command will open a UI window
                            pointing to all the useful operations
                            this plugin can provide.
                            This one is subject to change,
                            just as |vim.ui| is


                                                       *ProjectLog*  *:ProjectLog*
`:ProjectLog[!]`
                            IMPORTANT ~
                            This command will not be available unless ~
                            you set `log.enabled = true` in your `setup()` ~

                            The `:ProjectLog` command opens
                            the `project.nvim` log file in a new tab,
                            which can be exited by pressing `q` in Normal Mode.
                            If a `[!]` is supplied at the end of the command
                            (i.e. `:ProjectLog!`), then it'll close
                            any instance of a previously opened log file,
                            if found. Otherwise nothing will happen


                                             *ProjectLogClear*  *:ProjectLogClear*
`:ProjectLogClear`
                            IMPORTANT ~
                            This command will not be available unless ~
                            you set `log.enabled = true` in your `setup()` ~

                            The `:ProjectLogClear` command will delete
                            all the contents of your log file,
                            assuming there is one.
                            If this is called from a logfile tab,
                            then it will attempt to close it

                            NOTE ~
                            Once this command is called no more logs
                            will be written for your current Neovim session.
                            You will have to restart.
                            You could set `vim.g.project_log_cleared`
                            to a value different to `1`.
                            THIS SOLUTION IS NOT TESTED FULLY. ~
                            EXPECT WEIRD BEHAVIOUR IF YOU DO THIS! ~


                                                       *ProjectFzf*  *:ProjectFzf*
`:ProjectFzf`

                            This command works ONLY if you have ~
                            `fzf-lua` installed and loaded ~

                            The `:ProjectFzf` command is a
                            dynamicly enabled User Command that runs
                            `project.nvim` through `fzf-lua`.
                            For now it just executes
                            `require('project.extensions.fzf-lua').run_fzf_lua()`


                                           *ProjectTelescope*  *:ProjectTelescope*
`:ProjectTelescope`

                            This command works ONLY if you have ~
                            `telescope.nvim` installed and loaded ~

                            The `:ProjectTelescope` command is a
                            dynamicly enabled User Command
                            that runs the Telescope `projects` picker.
                            A shortcut, to be honest


                                                       *ProjectAdd*  *:ProjectAdd*
`:ProjectAdd[!]`

                            The `:ProjectAdd` command is a manual hook
                            that opens a prompt to input any directory
                            through a UI prompt, to be saved
                            to your project history.
                            If your prompt is valid your `cwd`
                            will be switched to said directory.
                            Adding a [!] will set the prompt to your cwd.
                            This is particularly useful if you've
                            enabled {manual_mode} in `setup()`.

                            See |project-nvim.setup-options|


                                                 *ProjectConfig*  *:ProjectConfig*
`:ProjectConfig`

                            The `:ProjectConfig` command is a hook
                            to display your current config through
                            |project-nvim.get_config()|.

                            The command does essentially the following
                            in the command line:
>lua
                            vim.notify(vim.inspect(
                                require('project').get_config()
                            ))
<
                            Useful for debugging.


                                                 *ProjectDelete*  *:ProjectDelete*
`:ProjectDelete[!] [/path/to/first [/path/to/second [...]]]`

                            The `:ProjectDelete` command is a utility
                            to delete your projects.
                            If no arguments are given
                            a popup with a list of your current projects
                            will be opened.
                            If one or more arguments are passed
                            it will expect directories separated by a space.
                            The arguments have to be directories that are
                            returned by `get_recent_projects()`
                            (see |project-nvim.get_recent_projects()|).
                            The arguments can be relative,
                            absolute or un-expanded (`~/path/to/project`).
                            The command will attemptto parse the args and,
                            unless a `!` is passed to the command
                            (`:ProjectDelete!`). In that case
                            invalid args will be ignored.
                            If there's a successful deletion
                            you'll recieve a notification denoting success.


                                                     *ProjectRoot*  *:ProjectRoot*
`:ProjectRoot[!]`

                            The `:ProjectRoot` command is a manual hook
                            to set the current working directory
                            to the current file's root, attempting to use
                            any of the detection methods
                            set by the user
                            (|Project.Config.Options.detection_methods|).
                            Adding a [!] will make this command verbose.

                            The command does essentially the following
                            in the command line:
>vim
                            :lua require('project.api').on_buf_enter()
<
                            This is particularly useful if you enabled
                            {manual_mode} in `setup()`
                            (see |project-nvim.setup-options|).


                                               *ProjectSession*  *:ProjectSession*
`:ProjectSession`

                            The `:ProjectSession` command prints out
                            the current session projects,
                            in numerical order,
                            found in `History.session_projects`


==============================================================================
8. API                                                        *project-nvim.api*

    This is a set of both internal utilities and tools for the user
    to benefit from.

------------------------------------------------------------------------------
8.1 `get_project_root()`                         *project-nvim.get_project_root()*

    An internal method for the API to determine
    both the project root and the method/LSP used

    Example ~
>lua
        ---@type string?, string?
        local root, lsp_or_method = require('project').get_project_root()
<

------------------------------------------------------------------------------
8.2 `get_recent_procjects()`                 *project-nvim.get_recent_procjects()*

    This utility returns either an empty table `{}`
    or a string array `{ '/path/to/project1', ... }`
    containing your recent projects.


    Example ~

    You can get a list of recent projects like this:
>lua
        ---@type string[]
        local recent_projects = require('project').get_recent_projects()

        -- Using `vim.notify()`
        vim.notify(vim.inspect(recent_projects))

        -- Using `vim.print()`
        vim.print(recent_projects)
<

------------------------------------------------------------------------------
8.3 `get_config()`                                     *project-nvim.get_config()*

    If `setup()` (|project-nvim.setup|) has been called, it returns
    a table containing the currently set options.
    Otherwise it will return `nil`.

    Example ~
>lua
        local config = require('project').get_config()

        -- Using `vim.notify()`
        vim.notify(vim.inspect(config))

        -- Using `vim.print()`
        vim.print(config)
<

------------------------------------------------------------------------------
8.4 `get_history_paths()`                       *project-nvim.get_history_paths()*

    If no valid args are passed to this function
    it will return the following dictionary:
>lua
        --- Lua
        local get_history_paths = require('project').get_history_paths

        -- A dictionary table containing all return values below
        vim.print(get_history_paths())
        --- {
        ---     datapath = <datapath>,
        ---     projectpath = <projectpath>,
        ---     historyfile = <historyfile>,
        --- }
<
    Otherwise, if either `'datapath'`, `'projectpath'
    or `'historyfile'` are passed, it will return
    the string value of said arg:
>lua
        -- The directory where `project` sets its `datapath`
        vim.print(get_history_paths('datapath'))

        -- The directory where `project` saves the project history
        vim.print(get_history_paths('projectpath'))

        -- The path to where `project` saves its recent projects history
        vim.print(get_history_paths('historyfile'))
<

==============================================================================
9. Util                                                      *project-nvim.util*

    A set of utilities that get repeated across the board.
    These utilities are in part inspired by my own utilities
    found in `Jnvim`, my own Nvim configuration.

    For more info look up `https://github.com/DrKJeff16/Jnvim`.

    You can import the utilities in Lua:
>lua
        local ProjUtil = require('project.utils.util')
<

==============================================================================
10. Troubleshooting                               *project-nvim.troubleshooting*


    History File Not Created ~

    If you're in a UNIX environment make sure you have
    `read`, `write` and `access` permissions (`rwx`)
    for the `projectpath` directory.

    - The default value is `$XDG_DATA_HOME/nvim/project_nvim`
    - See |stdpath()| for more info

    You can get the value of `projectpath` by running in the cmdline:
>vim
        :lua vim.print(require('project').get_history_paths('projectpath'))
<
    If you lack the required permissions for that directory,
    you can either:

        - Delete that directory (RECOMMENDED)
        - Run `chmod 755 <project/path>` (NOT SURE IF THIS WILL FIX IT)


 vim:tw=78:ts=4:sw=4:sts=4:et:ft=help:norl:
